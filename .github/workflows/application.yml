# Define the name of the GitHub Action workflow
name: Create an Application instance
# This workflow is manually triggered using the GitHub Actions UI
on:
  workflow_dispatch:
    # Define inputs that are required for the manual trigger
    inputs:
      EKSname:
        description: 'Name of the EKS' 
        required: false  # Is it optional or required?      
      ApplicationName:
        description: 'Name of the Application'  # What's this input for?
        required: false  # Is it optional or required?
      awsRegion:
        description: 'AWS Region for the Application'
        required: false
      Replicas:
        type: choice
        description: 'Count of Application'
        required: false
        options: 
        - 1
        - 2
        - 3
        - 4
      action:
        description: 'Action to perform (apply/destroy)'
        required: true
    defaults:
      EKSname: ''
      awsRegion: 'ap-northeast-2'
      ApplicationName: ''
      Replicas: '1'        
# Jobs to be executed in this workflow
jobs:
  # Job for applying the application instance
  apply_application:
    # Use the latest Ubuntu runner
    runs-on: self-hosted
    
    # Execute this step only if the action input is "apply"
    if: ${{ github.event.inputs.action == 'apply' }}
    # Define the steps for this job
    steps:
    
    # checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v2  
      with:
        path: ${{ github.event.inputs.ApplicationName }}     

# adding aws keys. Please store the value of these key in GitHub variables
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.awsRegion }}
        
    - name: make directory
      run: mkdir -p ${{ github.event.inputs.ApplicationName }} > /dev/null 2>&1
      
    - name: Install Terraform state file
      run: aws s3 cp s3://wlsdn-s3/${{ github.event.inputs.ApplicationName }}/ ./${{ github.event.inputs.ApplicationName }} --recursive
      continue-on-error: true
      
    # Initialize Terraform 
    - name: Terraform Init
      run: terraform init
      working-directory: ${{ github.event.inputs.ApplicationName }}  # Where should this command be run?
      
    # Format Terraform code
    - name: Terraform Format
      run: terraform fmt
      working-directory: ${{ github.event.inputs.ApplicationName }}
      
    # Validate the Terraform code 
    - name: Terraform Validate
      run: terraform validate
      working-directory: ${{ github.event.inputs.ApplicationName }}
      
    # Apply the Terraform plan
    - name: Terraform vars
      run: |
        sed -i -e 's/^ApplicationName *= *".*"/ApplicationName = "${{ github.event.inputs.ApplicationName }}"/' \
           -e 's/^awsRegion *= *".*"/awsRegion = "${{ github.event.inputs.awsRegion }}"/' \
           -e 's/^Replicas *= *[0-9]*/Replicas = ${{ github.event.inputs.Replicas }}/' \
           -e 's/^eks_cluster_name *= *".*"/eks_cluster_name = "${{ github.event.inputs.EKSname }}"/' \
           terraform.tfvars
      working-directory: ${{ github.event.inputs.ApplicationName }}
      
    - name: terraform apply
      run: terraform apply -auto-approve
      working-directory: ${{ github.event.inputs.ApplicationName }}   
      
    - name: Upload Terraform state file
      run: aws s3 cp ./${{ github.event.inputs.ApplicationName }} s3://wlsdn-s3/${{ github.event.inputs.ApplicationName }} --recursive --exclude ".git*" --exclude ".terraform*"

  # Destroying the  application instance
  destroy_application:
    runs-on: self-hosted
    
    # Execute this job only if the action input is "destroy"
    if: ${{ github.event.inputs.action == 'destroy' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2 
      with:
        path: ${{ github.event.inputs.ApplicationName }}        
      
# adding aws keys. Please store the value of these key in GitHub variables
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.awsRegion }}

    - name: Install Terraform state file
      run: aws s3 cp s3://wlsdn-s3/${{ github.event.inputs.ApplicationName }}/ ./${{ github.event.inputs.ApplicationName }} --recursive
      
    - name: Terraform Init
      run: terraform init
      working-directory: ${{ github.event.inputs.ApplicationName }}
      
    - name: Terraform FMT
      run: terraform fmt
      working-directory: ${{ github.event.inputs.ApplicationName }}      
      
    # Destroy all resources 
    - name: Terraform Destroy
      run: terraform destroy -auto-approve
      working-directory: ${{ github.event.inputs.ApplicationName }}

    - name: Upload Terraform state file
      run: aws s3 cp ./${{ github.event.inputs.ApplicationName }} s3://wlsdn-s3/${{ github.event.inputs.ApplicationName }} --recursive --exclude ".git*" --exclude ".terraform*" 
